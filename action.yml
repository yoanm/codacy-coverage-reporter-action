# action.yml
name: 'Codacy Coverage Reporter'
description: 'Multi-language coverage reporter for Codacy'
branding:
  icon: 'check'
  color: 'gray-dark'
inputs:
  project-token:
    required: false
    description: "API project token to authenticate on the Codacy API while uploading the coverage data"
  api-token:
    required: false
    description: "API account token to authenticate on the Codacy API while uploading the coverage data"
  coverage-reports:
    description: 'Optional comma separated list of coverage reports to send to Codacy'
    required: false
    default: ''
  language:
    description: 'Optionally force associating a language with your coverage report'
    required: false
  force-coverage-parser:
    description: 'Optionally force using a specific coverage report parser'
    required: false
  force-commit-sha:
    description: 'Optionally force commit associated to the coverage data'
    required: false
  coverage-reporter-version:
    description: 'Optionally force using a specific coverage reporter version'
    required: false
runs:
  using: "composite"
  steps:
    - name: "Set Repository Variables"
      uses: actions/github-script@v7
      env:
        INPUT_COVERAGE-REPORTER-VERSION: ${{ inputs.coverage-reporter-version }}
      with:
        script: |
          const {GITHUB_SERVER_URL} = process.env;
          
          core.exportVariable('ORGANIZATION_PROVIDER', 'https://github.com' === GITHUB_SERVER_URL ? 'gh' : 'ghe');
          core.exportVariable('OWNER_NAME', github.context.repo.owner);
          core.exportVariable('REPOSITORY_NAME', github.context.repo.repo);

          const coverageReporterVersion = core.getInput('coverage-reporter-version', {trimWhitespace: false});
          if (coverageReporterVersion.length > 0) {
              core.exportVariable('CODACY_REPORTER_VERSION', coverageReporterVersion);
          }

    - name: Build reporter params
      id: build-reporter-params
      uses: actions/github-script@v7
      env:
        INPUT_COVERAGE-REPORTS: ${{ inputs.coverage-reports }}
        INPUT_API-TOKEN: ${{ inputs.api-token }}
        INPUT_PROJECT-TOKEN: ${{ inputs.project-token }}
        INPUT_LANGUAGE: ${{ inputs.language }}
        INPUT_FORCE-COVERAGE-PARSER: ${{ inputs.force-coverage-parser }}
        INPUT_FORCE-COMMIT-SHA: ${{ inputs.force-commit-sha }}
      with:
        script: |
          core.info('Welcome to Coverage-Reporter-Action');
          
          // Authent
          const apiToken = core.getInput('api-token', {trimWhitespace: false});
          if (apiToken.length > 0 ) {
              const {ORGANIZATION_PROVIDER, OWNER_NAME, REPOSITORY_NAME} = process.env;
              core.setOutput('auth-params',
                  [
                      "--api-token '" + apiToken + "'",
                      "--organization-provider '" + ORGANIZATION_PROVIDER + "'",
                      "--username '" + OWNER_NAME + "'",
                      "--project-name '" + REPOSITORY_NAME + "'"
                  ].join(' ')
              );
          }
          const projectToken = core.getInput('project-token', {trimWhitespace: false});
          if (projectToken.length > 0 ) {
              core.setOutput('auth-params', coverageReports.split(',').map(rPath => "-r '" + rPath + "'").join(' '));
          }
          
          const paramList = [];
          const language = core.getInput('language', {trimWhitespace: false});
          if (language.length > 0 ) {
              paramList.push("--language '" + language + "'");
          }
          const forceCoverageParser = core.getInput('force-coverage-parser', {trimWhitespace: false});
          if (forceCoverageParser.length > 0 ) {
              paramList.push("--force-coverage-parser '" + forceCoverageParser + "'");
          }
          const forceCommitSha = core.getInput('force-commit-sha-param', {trimWhitespace: false});
          if (forceCommitSha.length > 0) {
              paramList.push( "--commit-uuid '" + forceCommitSha + "'");
          }
          const coverageReports = core.getInput('coverage-reports', {trimWhitespace: false});
          if (coverageReports.trim().length > 0 ) {
              paramList.push(coverageReports.split(',').map(reportPath => "-r '" + reportPath + "'").join(' '));
          }
          
          core.setOutput('report-params', paramList.join(' '));

      - name: "Run coverage-reporter"
        shell: bash
        env:
          AUTH_PARAMS: ${{ steps.build-reporter-params.output.auth-params }}
          REPORT_PARAMS: ${{ steps.build-reporter-params.output.report-params }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report $AUTH_PARAMS $REPORT_PARAMS --partial &&\
          bash <(curl -Ls https://coverage.codacy.com/get.sh) final $AUTH_PARAMS
